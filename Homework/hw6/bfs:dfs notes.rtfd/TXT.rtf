{\rtf1\ansi\ansicpg1252\cocoartf2818
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Bold;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww11520\viewh5980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Graph for examples:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 {{\NeXTGraphic Pasted Graphic.png \width7560 \height2840 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
For BFS\
First Generate Adjacency List: \
\pard\pardeftab720\partightenfactor0

\f1\b \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A:
\f2\b0  B, E, F\

\f1\b B:
\f2\b0  A, C, G\

\f1\b C:
\f2\b0  B, G\

\f1\b D:
\f2\b0  H, I\

\f1\b E:
\f2\b0  A\

\f1\b F:
\f2\b0  A, G\

\f1\b G:
\f2\b0  B, C, F\

\f1\b H:
\f2\b0  D, I\

\f1\b I:
\f2\b0  D, H\
\
Then Make a Queue, a Visited Set, and the Search Tree: \
Start with A: \
Queue: A\
Visited: A\
\
Then process node by node:\
First Take Current Node: A\
Queue before Processing: A\
Neighbors of A: B, E, F (make sure they are sorted)\
Process Each Neighbor\
Neighbor B: \
Visited ? No\
Mark as visited, add to queue add as child to A\
So: \
Queue: B\
Visited: A, B\
\
For DFS: \
First make adjacency list: \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b \cf0 \strokec2 Adjacency List:
\f2\b0 \

\f1\b A:
\f2\b0  B, E, F\

\f1\b B:
\f2\b0  A, C, G\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\b \cf0 C:
\f2\b0  B, G\
\ls1\ilvl0
\f1\b D:
\f2\b0  H, I\
\ls1\ilvl0
\f1\b E:
\f2\b0  A, G\
\ls1\ilvl0
\f1\b F:
\f2\b0  A, G\
\ls1\ilvl0
\f1\b G:
\f2\b0  B, C, E, F\
\ls1\ilvl0
\f1\b H:
\f2\b0  D, I\
\ls1\ilvl0
\f1\b I:
\f2\b0  D, H\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\cf0 Then Take Starting Node: A\
Make a visited set: A\
Take Neighbors of Current Node: B, E, F (alphabetically sorted)\
Explore Neighbors in alphabetical order: start with B\
Mark B as visited: visited set: A, B\
Add B as a child of A in the search tree\
Take neighbors of B: A, C, G (sorted)\
Move to Neighbor C of B (A has been visited)\
\
}